#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;


out vec3 Normal;
out vec3 FragPos; //For diffuse lighting calc: We'll need the position in WORLD SPACE for light calcs -> Multiply only by model matrix and not view / projection
out vec2 TexCoords;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{
    gl_Position = projection * view * model * vec4(aPos, 1.0);
    FragPos = vec3(model * vec4(aPos, 1.0));

    //Normal must be passed to world space as well, since it's used in diffuse calcs. We use a transpose inverse of the model matrix (known as the normal matrix) since Normal does not have a w (translation) component
    Normal = mat3(transpose(inverse(model))) * aNormal; //inverse in GPU is very expensive, would be better to calculate it on CPU and send it to GPU
    
    TexCoords = aTexCoords;
} 